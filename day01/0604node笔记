第一天
node    =>  后台

JavaScript  =>  前台

js前后台

php
Java
Python

性能简介
node    比php性能快86倍
1s      86s
6w      254w
Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。
Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。
Node.js 的包管理器 npm，是全球最大的开源库生态系统。


使用js编写
前后端对接       无缝对接

cmd 打开命令行
cd 文件



第二天
1.get       请求的数据
2.post



post数据比get数据大的多

前端       =>     ajax    jsonp   form    不一样

后台      =>      http    没有什么差别


应用
用户登录注册




第三天

1.用户登录注册


接口：
1.注册
  /user?act=reg&name=guo&pass=123456
{"ok":"false","msg":"原因"}
2.登录
  /user?act=login&name=guo&pass=123456
{"ok":"false","msg":"原因"}

//文件请求
localhost:8080/index.html
localhost:8080/1.jpg
localhost:8080/favicon.ico
//接口请求
localhost:8080/user?act=login&name=guo&pass=123456


第三天下午   require
模块化
1.系统模块
http  fs url querystring

2.自定义模块


nmp     node package manager(nodejs包管理工具)

npm 用于
    1.统一下载途径
    2.自动下载依赖

第四天
express     框架

安装
req res
不是之前的热情和res了
保留之前的功能 还自己新增了一些东西
比如说:send()
express 框架 他保留之前的功能 还自己新添加了一些东西

use get post
use get 和 post
get 只能接受get
post只能接受post

接口 登录
/login?user=xxx&pass=12345
{"ok":true,"msg":"原因"}



第五天
repress
repress-static
获取GET POST数据
//get
req.qurery

//post
 body-parser       // 使用了中间件
urlencoded      //两个参数


链式操作
next（）；



中间件 body-parser
自己写中间件


C:\Users\郭娜\Desktop\npm\day05>cd C:\Users\郭娜\Desktop\npm\day05\my-module

C:\Users\郭娜\Desktop\npm\day05\my-module>npm init
This utility will walk you through creating a package.json file.
It only covers the most common items, and tries to guess sensible defaults.

See `npm help json` for definitive documentation on these fields
and exactly what they do.

Use `npm install <pkg>` afterwards to install a package and
save it as a dependency in the package.json file.

Press ^C at any time to quit.
package name: (my-module) zhongjianjian
version: (1.0.0)
description: 中间件封装
entry point: (my-body-parser.js)
test command: 中间件 zhongjianjian guona
git repository:
keywords: 中间件 zhongjianjian guona
author: guona
license: (ISC)
About to write to C:\Users\郭娜\Desktop\npm\day05\my-module\package.json:

{
  "name": "zhongjianjian",
  "version": "1.0.0",
  "description": "中间件封装",
  "main": "my-body-parser.js",
  "scripts": {
    "test": "中间件 zhongjianjian guona"
  },
  "keywords": [
    "中间件",
    "zhongjianjian",
    "guona"
  ],
  "author": "guona",
  "license": "ISC"
}


Is this ok? (yes)

C:\Users\郭娜\Desktop\npm\day05\my-module>npm login
Username: guona
Password:
Email: (this IS public) 1972819023@qq.com
Logged in as guona on https://registry.npmjs.org/.

C:\Users\郭娜\Desktop\npm\day05\my-module>npm publish
+ zhongjianjian@1.0.0

C:\Users\郭娜\Desktop\npm\day05\my-module>cd C:\Users\郭娜\Desktop\npm\day05

C:\Users\郭娜\Desktop\npm\day05>npm install zhongjianjian
npm WARN day05@1.0.0 No description
npm WARN day05@1.0.0 No repository field.

+ zhongjianjian@1.0.0
added 1 package in 6.047s

C:\Users\郭娜\Desktop\npm\day05>



第五天下午day06

cookie

session


但凡和服务器之间的交互都是根据http协议来完成的，
但http是无状态的，（多次请求不能判断是同一个人）
造成每次刷新页面，都要重新登录。所以说有了cookie。


cookie
    在浏览器保存一些数据，每次请求都会带过来，
    既然是存在客户端，那么->能修改 =>不安全
    大小有限制   （4k）

session
     也是保存数据的
     保存在服务器端
     大小无限（服务器能存多少他就能存到大）

cookie 它存储小还不安全   为何会使用它？

session不能独立存在 他是基于cookie而存在的
cookie中会有一个session的id，服务器是利用session的id来找到session文件，读取或者写入

session 的隐患：session劫持   session的id既然存在cookie中  cookie中那么就能看到，
当别人把你的id拿走以后 就能以你的身份访问服务器。
并且这个隐患从理论上讲师无法避免的，无法解决 但可以缓解










状态码

临时响应    消息
     '100': 'Continue', 继续  --客户端应当继续发送请求
     '101': 'Switching Protocols',切换协议
     '102': 'Processing',   处理  由WebDAV（RFC 2518）扩展的状态码，代表处理将被继续执行。
     '103': 'Early Hints',          早期暗示

成功
     '200': 'OK',   成功
     '201': 'Created',  已创建
     '202': 'Accepted',     已接收
     '203': 'Non-Authoritative Information',    非授权信息   服务器已成功处理了请求，但返回的实体头部元信息不是在原始服务器上有效的确定集合，而是来自本地或者第三方的拷贝。
     '204': 'No Content',   无内容     服务器成功处理了请求，但不需要返回任何实体内容，并且希望返回更新了的元信息。
     '205': 'Reset Content',    重置内容
     '206': 'Partial Content',  部分内容
     '207': 'Multi-Status',             由WebDAV(RFC 2518)扩展的状态码，代表之后的消息体将是一个XML消息，并且可能依照之前子请求数量的不同，包含一系列独立的响应代码。
     '208': 'Already Reported',
     '226': 'IM Used',

重定向
     '300': 'Multiple Choices',     多种选择
     '301': 'Moved Permanently',    永久移动
     '302': 'Found',    临时移动
     '303': 'See Other',    查看其他位置
     '304': 'Not Modified',     未修改
     '305': 'Use Proxy',    使用代理
     '307': 'Temporary Redirect',   临时重定向
     '308': 'Permanent Redirect',

请求错误
     '400': 'Bad Request',  错误请求
     '401': 'Unauthorized', 未授权
     '402': 'Payment Required',         该状态码是为了将来可能的需求而预留的。
     '403': 'Forbidden',    已禁止
     '404': 'Not Found',    未找到
     '405': 'Method Not Allowed',   方法禁用
     '406': 'Not Acceptable',   不接受
     '407': 'Proxy Authentication Required',    需要代理授权
     '408': 'Request Timeout',  请求超时
     '409': 'Conflict', 冲突
     '410': 'Gone', 已删除
     '411': 'Length Required',  需要有效长度
     '412': 'Precondition Failed',  为满足前提条件
     '413': 'Payload Too Large',    请求实体过大
     '414': 'URI Too Long',     请求的URL过长
     '415': 'Unsupported Media Type',不支持的媒体类型
     '416': 'Range Not Satisfiable',    请求范围不符合要求
     '417': 'Expectation Failed',   为满足期望值
     '418': 'I\'m a Teapot',
     '421': 'Misdirected Request',      误导请求          从当前客户端所在的IP地址到服务器的连接数超过了服务器许可的最大范围。
     '422': 'Unprocessable Entity',     不可处理的实体     请求格式正确，但是由于含有语义错误，无法响应。
     '423': 'Locked',
     '424': 'Failed Dependency',        依赖失败        由于之前的某个请求发生的错误，导致当前请求失败，
     '425': 'Unordered Collection',
     '426': 'Upgrade Required',     升级所需
     '428': 'Precondition Required',    所需的先决条件
     '429': 'Too Many Requests',        请求太多
     '431': 'Request Header Fields Too Large',
     '451': 'Unavailable For Legal Reasons',

服务器错误
     '500': 'Internal Server Error',    服务器内部错误
     '501': 'Not Implemented',  尚未实施
     '502': 'Bad Gateway',  错误网关
     '503': 'Service Unavailable',  服务不可用
     '504': 'Gateway Timeout',  网关超时
     '505': 'HTTP Version Not Supported',   HTTP版本不支持
     '506': 'Variant Also Negotiates',
     '507': 'Insufficient Storage', 存储不足
     '508': 'Loop Detected',    回路检测
     '509': 'Bandwidth Limit Exceeded', 超出带宽限制
     '510': 'Not Extended',     为扩展
     '511': 'Network Authentication Required' 需要网络认证













